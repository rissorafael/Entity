using BMG.CobrancaEmAtraso.Application;
using BMG.CobrancaEmAtraso.Application.Interfaces;
using BMG.CobrancaEmAtraso.Application.Services;
using BMG.CobrancaEmAtraso.Domain.Interfaces;
using BMG.CobrancaEmAtraso.Infra.Data;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Serilog;

await MainAsync();

static async Task MainAsync()
{
    var serviceCollection = new ServiceCollection();
    ConfigureServices(serviceCollection);

    IServiceProvider serviceProvider = serviceCollection.BuildServiceProvider();
    var logger = serviceProvider.GetRequiredService<ILogger>();

    var response = serviceProvider.GetService<IAutenticacaoService>().ValidacaoAd();
    if (!response)
    {
        logger.Information("Usuario n√£o autorizado");
        return;
    }

    logger.Information("Aplicacao iniciada!");

    var result = await serviceProvider.GetService<IAtrasoApplication>().BuscarCobrancaAsync();
    await serviceProvider.GetService<IAtrasoApplication>().CsvRun(result);

    logger.Information("Encerrando aplicacao...");
}


static void ConfigureServices(IServiceCollection serviceCollection)
{
    var configuration = new ConfigurationBuilder()
          .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
          .AddJsonFile("appsettings.json", false)
          .Build();

    Log.Logger = new LoggerConfiguration()
        .WriteTo.Console()
        .WriteTo.File(configuration.GetSection("LogFilePath").Value)
        .CreateLogger();

    serviceCollection.AddSingleton<IConfigurationRoot>(configuration);
    serviceCollection.AddSingleton<IAutenticacaoService, AutenticacaoService>();
    serviceCollection.AddSingleton<IAtrasoApplication, AtrasoApplication>();
    serviceCollection.AddSingleton<ICobrancaDal, CobrancaDal>();
    serviceCollection.AddSingleton<IExcelHandler, ExcelHandler>();
    serviceCollection.AddSingleton<ILogger>((l) => Log.Logger);
}